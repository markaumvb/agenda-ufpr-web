function initAgendaForm() {
  // Elementos do formul√°rio
  const form = document.querySelector("form");
  const titleInput = document.getElementById("title");
  const colorInput = document.getElementById("color");

  // Verificar se estamos em um formul√°rio de edi√ß√£o ou cria√ß√£o
  const isEditForm = window.location.href.includes("/edit");

  // Valida√ß√£o do formul√°rio antes do envio
  if (form && !form.classList.contains("delete-form")) {
    form.addEventListener("submit", function (event) {
      // Verificar se o t√≠tulo foi preenchido
      if (titleInput && !titleInput.value.trim()) {
        event.preventDefault();
        alert("O t√≠tulo da agenda √© obrigat√≥rio.");
        titleInput.focus();
        return false;
      }
    });
  }

  // Atualiza√ß√£o em tempo real da cor selecionada
  if (colorInput) {
    colorInput.addEventListener("input", function () {
      console.log("Cor selecionada:", colorInput.value);
    });
  }
}

function initDeleteConfirmations() {
  // CORRIGIDO: M√©todo mais simples e eficaz para evitar duplica√ß√£o
  console.log("üóëÔ∏è Inicializando confirma√ß√µes de exclus√£o...");

  // Remover todos os event listeners existentes usando uma abordagem diferente
  const deleteForms = document.querySelectorAll(".delete-form");

  deleteForms.forEach((form, index) => {
    // Verificar se j√° tem o event listener para evitar duplica√ß√£o
    if (form.hasAttribute("data-delete-listener")) {
      return; // J√° tem listener, pular
    }

    // Marcar que este formul√°rio j√° tem listener
    form.setAttribute("data-delete-listener", "true");

    // Adicionar event listener √∫nico
    form.addEventListener(
      "submit",
      function (event) {
        event.preventDefault(); // Sempre prevenir envio inicial
        event.stopPropagation(); // Evitar propaga√ß√£o

        console.log(
          `üóëÔ∏è Tentativa de exclus√£o capturada - Formul√°rio ${index + 1}`
        );

        // Verificar se j√° est√° sendo processado
        if (this.hasAttribute("data-processing")) {
          console.log("‚ö†Ô∏è Exclus√£o j√° est√° sendo processada, ignorando...");
          return false;
        }

        // Marcar como sendo processado
        this.setAttribute("data-processing", "true");

        // Obter o nome da agenda se dispon√≠vel
        const agendaCard = this.closest(".agenda-card");
        const agendaTitle = agendaCard
          ? agendaCard.querySelector(".agenda-title")?.textContent?.trim()
          : "";

        // Mensagem personalizada
        let confirmMessage = "Tem certeza que deseja excluir esta agenda?";
        if (agendaTitle) {
          confirmMessage = `Tem certeza que deseja excluir a agenda "${agendaTitle}"?`;
        }
        confirmMessage += "\n\nEsta a√ß√£o n√£o pode ser desfeita.";

        // Mostrar confirma√ß√£o
        const confirmed = confirm(confirmMessage);

        if (confirmed) {
          console.log("‚úÖ Exclus√£o confirmada pelo usu√°rio");

          // Desabilitar o bot√£o para evitar cliques m√∫ltiplos
          const submitBtn = this.querySelector('button[type="submit"]');
          if (submitBtn) {
            submitBtn.disabled = true;
            submitBtn.innerHTML =
              '<i class="fas fa-spinner fa-spin"></i> Excluindo...';
          }

          // Submeter o formul√°rio
          this.submit();
        } else {
          console.log("‚ùå Exclus√£o cancelada pelo usu√°rio");
          // Remover marca de processamento se cancelou
          this.removeAttribute("data-processing");
        }

        return false;
      },
      { once: false }
    ); // N√£o usar 'once: true' para permitir m√∫ltiplas tentativas se necess√°rio

    console.log(`‚úÖ Event listener adicionado ao formul√°rio ${index + 1}`);
  });

  console.log(
    `üóëÔ∏è Total de formul√°rios de exclus√£o configurados: ${deleteForms.length}`
  );
}

// Fun√ß√£o para resetar listeners se necess√°rio (para debugging)
function resetDeleteListeners() {
  console.log("üîÑ Resetando listeners de exclus√£o...");
  const deleteForms = document.querySelectorAll(".delete-form");
  deleteForms.forEach((form) => {
    form.removeAttribute("data-delete-listener");
    form.removeAttribute("data-processing");
  });
  initDeleteConfirmations();
}

// Exportar fun√ß√µes para uso em outros arquivos
window.AgendaCommon = {
  initAgendaForm,
  initDeleteConfirmations,
  resetDeleteListeners, // Para debugging
};

// Debug: Expor fun√ß√£o para resetar se necess√°rio
window.resetDeleteListeners = resetDeleteListeners;
