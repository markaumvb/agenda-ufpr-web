document.addEventListener("DOMContentLoaded", function () {
  // Aguardar um pouco para garantir que a p√°gina carregou completamente
  setTimeout(function () {
    initializeForm();
  }, 200);

  function initializeForm() {
    // Encontrar APENAS o formul√°rio principal de edi√ß√£o/cria√ß√£o
    let form = document.getElementById("compromisso-form");
    if (!form) {
      form = document.querySelector(".compromisso-form");
    }

    // IMPORTANTE: N√£o interferir com formul√°rios de exclus√£o
    if (
      !form ||
      form.classList.contains("delete-form-individual") ||
      form.classList.contains("delete-form-future") ||
      form.classList.contains("cancel-form-all")
    ) {
      console.log("‚ùå Formul√°rio de exclus√£o detectado - valida√ß√£o ignorada");
      return;
    }

    console.log("‚úÖ Formul√°rio principal encontrado:", form);

    // DESABILITAR VALIDA√á√ÉO NATIVA DE FORMA BRUTAL
    form.setAttribute("novalidate", "novalidate");
    form.noValidate = true;

    // Elementos de erro
    const errorContainer = document.getElementById("error-container");
    const errorList = document.getElementById("error-list");

    // INTERCEPTAR E CANCELAR QUALQUER EVENTO DE VALIDA√á√ÉO
    const eventsToBlock = ["invalid", "oninvalid"];

    eventsToBlock.forEach((eventType) => {
      form.addEventListener(
        eventType,
        function (e) {
          e.preventDefault();
          e.stopPropagation();
          e.stopImmediatePropagation();
          return false;
        },
        true
      );
    });

    // REMOVER VALIDA√á√ÉO DE TODOS OS INPUTS DE FORMA AGRESSIVA
    const allInputs = form.querySelectorAll("input, textarea, select");
    allInputs.forEach((input) => {
      // Remover todos os atributos de valida√ß√£o
      const validationAttrs = [
        "required",
        "pattern",
        "min",
        "max",
        "step",
        "minlength",
        "maxlength",
      ];
      validationAttrs.forEach((attr) => input.removeAttribute(attr));

      // Desabilitar valida√ß√£o customizada
      input.setCustomValidity("");

      // BLOQUEAR EVENTOS DE VALIDA√á√ÉO EM CADA INPUT
      eventsToBlock.forEach((eventType) => {
        input.addEventListener(
          eventType,
          function (e) {
            e.preventDefault();
            e.stopPropagation();
            e.stopImmediatePropagation();
            return false;
          },
          true
        );
      });

      // Para inputs datetime-local, interceptar mudan√ßas de valor
      if (input.type === "datetime-local") {
        // Interceptar TODOS os eventos que podem disparar valida√ß√£o
        ["input", "change", "blur", "keyup", "keydown", "focus"].forEach(
          (eventType) => {
            input.addEventListener(eventType, function (e) {
              // N√ÉO fazer valida√ß√£o, apenas limpar erros se existirem
              if (errorContainer && errorContainer.style.display === "block") {
                errorContainer.style.display = "none";
              }

              // For√ßar setCustomValidity vazio para evitar valida√ß√£o nativa
              input.setCustomValidity("");
            });
          }
        );
      }
    });

    // CONFIGURAR SINCRONIZA√á√ÉO DE DATAS SEM VALIDA√á√ÉO
    const startInput = document.getElementById("start_datetime");
    const endInput = document.getElementById("end_datetime");

    if (startInput && endInput) {
      startInput.addEventListener("change", function () {
        if (!startInput.value) return;

        try {
          const startDate = new Date(startInput.value);

          // Sincronizar apenas se o campo final estiver vazio
          if (!endInput.value && !isNaN(startDate.getTime())) {
            const endDate = new Date(startDate);
            endDate.setHours(endDate.getHours() + 1);
            endInput.value = formatDateTime(endDate);
          }
        } catch (e) {}
      });
    }

    // INTERCEPTAR SUBMIT APENAS PARA O FORMUL√ÅRIO PRINCIPAL
    form.addEventListener(
      "submit",
      function (e) {
        // IMPORTANTE: N√£o interceptar formul√°rios de exclus√£o
        if (
          e.target.classList.contains("delete-form-individual") ||
          e.target.classList.contains("delete-form-future") ||
          e.target.classList.contains("cancel-form-all") ||
          e.target.action.includes("/delete") ||
          e.target.action.includes("/cancel-future")
        ) {
          console.log("üóëÔ∏è Formul√°rio de exclus√£o - n√£o interceptar");
          return true; // Deixar enviar normalmente
        }

        e.preventDefault();
        e.stopPropagation();

        // Executar valida√ß√£o customizada
        const errors = validateFormData();

        if (errors.length > 0) {
          showErrors(errors);
        } else {
          // Enviar formul√°rio sem valida√ß√£o
          submitFormSafely();
        }
      },
      true
    );

    // FUN√á√ÉO DE VALIDA√á√ÉO (executada apenas no submit)
    function validateFormData() {
      const errors = [];

      // Validar t√≠tulo
      const titleInput = document.getElementById("title");
      if (!titleInput || !titleInput.value.trim()) {
        errors.push("O t√≠tulo √© obrigat√≥rio");
      }

      // Validar data de in√≠cio
      if (!startInput || !startInput.value) {
        errors.push("A data e hora de in√≠cio s√£o obrigat√≥rias");
      } else {
        const startDate = new Date(startInput.value);
        const now = new Date();

        if (isNaN(startDate.getTime())) {
          errors.push("Data de in√≠cio inv√°lida");
        } else if (startDate <= now) {
          errors.push("A data e hora de in√≠cio devem ser posteriores");
        }
      }

      // Validar data de t√©rmino
      if (!endInput || !endInput.value) {
        errors.push("A data e hora de t√©rmino s√£o obrigat√≥rias");
      } else if (startInput && startInput.value) {
        const startDate = new Date(startInput.value);
        const endDate = new Date(endInput.value);

        if (isNaN(endDate.getTime())) {
          errors.push("Data de t√©rmino inv√°lida");
        } else if (!isNaN(startDate.getTime()) && endDate <= startDate) {
          errors.push(
            "A data e hora de t√©rmino deve ser posterior √† data e hora de in√≠cio"
          );
        }
      }

      // Validar recorr√™ncia
      const repeatType =
        document.querySelector('input[name="repeat_type"]:checked')?.value ||
        "none";

      if (repeatType !== "none") {
        const repeatUntilInput = document.getElementById("repeat_until");

        if (!repeatUntilInput || !repeatUntilInput.value) {
          errors.push(
            "Para eventos recorrentes, √© necess√°rio definir uma data final"
          );
        }

        if (repeatType === "specific_days") {
          const repeatDays = document.querySelectorAll(
            'input[name="repeat_days[]"]:checked'
          );
          if (repeatDays.length === 0) {
            errors.push(
              "Selecione pelo menos um dia da semana para a recorr√™ncia"
            );
          }
        }
      }

      return errors;
    }

    // FUN√á√ÉO PARA EXIBIR ERROS
    function showErrors(errors) {
      if (!errorContainer || !errorList) {
        alert("Erros encontrados:\n" + errors.join("\n"));
        return;
      }

      errorList.innerHTML = "";
      errors.forEach((error) => {
        const li = document.createElement("li");
        li.textContent = error;
        errorList.appendChild(li);
      });

      errorContainer.style.display = "block";
      errorContainer.scrollIntoView({ behavior: "smooth", block: "center" });
    }

    // FUN√á√ÉO PARA ENVIAR FORMUL√ÅRIO COM SEGURAN√áA
    function submitFormSafely() {
      // Criar um formul√°rio tempor√°rio limpo
      const tempForm = document.createElement("form");
      tempForm.action = form.action;
      tempForm.method = form.method;
      tempForm.style.display = "none";

      // Copiar todos os dados para o formul√°rio tempor√°rio
      const formData = new FormData(form);
      for (let [key, value] of formData.entries()) {
        const input = document.createElement("input");
        input.type = "hidden";
        input.name = key;
        input.value = value;
        tempForm.appendChild(input);
      }

      document.body.appendChild(tempForm);
      tempForm.submit();
    }

    // FUN√á√ÉO AUXILIAR PARA FORMATAR DATA
    function formatDateTime(date) {
      return (
        date.getFullYear() +
        "-" +
        String(date.getMonth() + 1).padStart(2, "0") +
        "-" +
        String(date.getDate()).padStart(2, "0") +
        "T" +
        String(date.getHours()).padStart(2, "0") +
        ":" +
        String(date.getMinutes()).padStart(2, "0")
      );
    }
  }
});
