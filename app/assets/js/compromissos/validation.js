document.addEventListener("DOMContentLoaded", function () {
  console.log("üöÄ Validation.js Ultra-Defensivo carregado");

  // AGUARDAR UM POUCO PARA GARANTIR QUE OUTROS SCRIPTS CARREGARAM
  setTimeout(function () {
    initializeValidation();
  }, 100);

  function initializeValidation() {
    // Buscar formul√°rio por id primeiro, depois por classe como fallback
    let form = document.getElementById("compromisso-form");
    if (!form) {
      form = document.querySelector(".compromisso-form");
      console.log("üìù Formul√°rio encontrado por classe");
    } else {
      console.log("üìù Formul√°rio encontrado por id");
    }

    if (!form) {
      console.error("‚ùå Formul√°rio n√£o encontrado!");
      return;
    }

    const startDatetimeInput = document.getElementById("start_datetime");
    const endDatetimeInput = document.getElementById("end_datetime");
    const errorContainer = document.getElementById("error-container");
    const errorList = document.getElementById("error-list");

    console.log("üîß Iniciando desabilita√ß√£o agressiva da valida√ß√£o nativa...");

    // ULTRA-CR√çTICO: Desabilitar TODAS as valida√ß√µes nativas de forma agressiva
    form.setAttribute("novalidate", "novalidate");
    form.noValidate = true;

    // REMOVER TODOS OS ATRIBUTOS DE VALIDA√á√ÉO DE TODOS OS INPUTS
    const allInputs = form.querySelectorAll("input, textarea, select");
    allInputs.forEach((input) => {
      // Remover atributos de valida√ß√£o
      input.removeAttribute("required");
      input.removeAttribute("pattern");
      input.removeAttribute("min");
      input.removeAttribute("max");
      input.removeAttribute("step");
      input.removeAttribute("minlength");
      input.removeAttribute("maxlength");

      // Desabilitar valida√ß√£o customizada do HTML5
      input.setCustomValidity("");

      // For√ßar noValidate
      if (input.form) {
        input.form.noValidate = true;
      }

      console.log(
        "üßπ Limpeza de valida√ß√£o para:",
        input.name || input.id || input.type
      );
    });

    // REMOVER TODOS OS EVENT LISTENERS EXISTENTES DE VALIDA√á√ÉO
    const newForm = form.cloneNode(true);
    form.parentNode.replaceChild(newForm, form);
    form = newForm;

    // RECRIAR REFER√äNCIAS DOS INPUTS AP√ìS CLONAGEM
    const newStartInput = document.getElementById("start_datetime");
    const newEndInput = document.getElementById("end_datetime");

    console.log("üõ°Ô∏è Interceptando submit com m√°xima prioridade...");

    // INTERCEPTAR SUBMIT COM M√ÅXIMA PRIORIDADE
    form.addEventListener(
      "submit",
      function (event) {
        console.log("üõë Submit interceptado - valida√ß√£o customizada");

        // FOR√áA STOP EM TUDO
        event.preventDefault();
        event.stopPropagation();
        event.stopImmediatePropagation();

        // Validar o formul√°rio
        const errors = validateForm();

        if (errors.length > 0) {
          console.log("‚ùå Erros encontrados:", errors);
          displayErrors(errors);
          return false;
        } else {
          console.log("‚úÖ Formul√°rio v√°lido, enviando...");
          // Criar um novo formul√°rio tempor√°rio para envio
          const tempForm = document.createElement("form");
          tempForm.action = form.action;
          tempForm.method = form.method;
          tempForm.style.display = "none";

          // Copiar todos os dados
          const formData = new FormData(form);
          for (let [key, value] of formData.entries()) {
            const input = document.createElement("input");
            input.type = "hidden";
            input.name = key;
            input.value = value;
            tempForm.appendChild(input);
          }

          document.body.appendChild(tempForm);
          tempForm.submit();
          return false;
        }
      },
      true
    ); // Capture = true para interceptar antes

    // FUN√á√ÉO PARA SINCRONIZAR DATAS SEM VALIDA√á√ÉO
    if (newStartInput && newEndInput) {
      // REMOVER QUALQUER EVENT LISTENER DE VALIDA√á√ÉO DOS INPUTS
      ["input", "change", "blur", "invalid", "keyup"].forEach((eventType) => {
        newStartInput.addEventListener(
          eventType,
          function (e) {
            e.stopPropagation();
            // Limpar mensagens de erro
            if (errorContainer) {
              errorContainer.style.display = "none";
            }
          },
          true
        );

        newEndInput.addEventListener(
          eventType,
          function (e) {
            e.stopPropagation();
            // Limpar mensagens de erro
            if (errorContainer) {
              errorContainer.style.display = "none";
            }
          },
          true
        );
      });

      // Sincroniza√ß√£o inteligente apenas no change
      newStartInput.addEventListener("change", function () {
        if (!newStartInput.value) return;

        try {
          const startDate = new Date(newStartInput.value);

          // Apenas sincronizar data de t√©rmino se estiver vazia
          if (!newEndInput.value) {
            const newEndDate = new Date(startDate);
            newEndDate.setHours(newEndDate.getHours() + 1);
            newEndInput.value = formatDateTime(newEndDate);
          }
        } catch (e) {
          console.log("‚ö†Ô∏è Erro ao processar data:", e);
        }
      });
    }

    // Fun√ß√£o para formatar data
    function formatDateTime(date) {
      return (
        date.getFullYear() +
        "-" +
        String(date.getMonth() + 1).padStart(2, "0") +
        "-" +
        String(date.getDate()).padStart(2, "0") +
        "T" +
        String(date.getHours()).padStart(2, "0") +
        ":" +
        String(date.getMinutes()).padStart(2, "0")
      );
    }

    // Fun√ß√£o para validar formul√°rio completo
    function validateForm() {
      const errors = [];

      // 1. Validar t√≠tulo
      const titleInput = document.getElementById("title");
      if (!titleInput || !titleInput.value.trim()) {
        errors.push("O t√≠tulo √© obrigat√≥rio");
      }

      // 2. Validar data e hora de in√≠cio
      if (!newStartInput || !newStartInput.value) {
        errors.push("A data e hora de in√≠cio s√£o obrigat√≥rias");
      } else {
        try {
          const startDate = new Date(newStartInput.value);
          const now = new Date();

          if (isNaN(startDate.getTime())) {
            errors.push("Data de in√≠cio inv√°lida");
          } else if (startDate <= now) {
            errors.push("A data e hora de in√≠cio deve ser no futuro");
          } else {
            // Verificar anteced√™ncia m√≠nima
            const minTimeBefore = parseInt(newStartInput.dataset.minTime || 0);
            if (minTimeBefore > 0) {
              const minDate = new Date();
              minDate.setHours(minDate.getHours() + minTimeBefore);

              if (startDate < minDate) {
                errors.push(
                  `A data e hora de in√≠cio deve ter pelo menos ${minTimeBefore} horas de anteced√™ncia`
                );
              }
            }
          }
        } catch (e) {
          errors.push("Data de in√≠cio inv√°lida");
        }
      }

      // 3. Validar data e hora de t√©rmino
      if (!newEndInput || !newEndInput.value) {
        errors.push("A data e hora de t√©rmino s√£o obrigat√≥rias");
      } else if (newStartInput && newStartInput.value) {
        try {
          const startDate = new Date(newStartInput.value);
          const endDate = new Date(newEndInput.value);

          if (isNaN(endDate.getTime())) {
            errors.push("Data de t√©rmino inv√°lida");
          } else if (!isNaN(startDate.getTime()) && endDate <= startDate) {
            errors.push(
              "A data e hora de t√©rmino deve ser posterior √† data e hora de in√≠cio"
            );
          }
        } catch (e) {
          errors.push("Data de t√©rmino inv√°lida");
        }
      }

      // 4. Validar recorr√™ncia
      const repeatTypeInputs = document.querySelectorAll(
        'input[name="repeat_type"]'
      );
      let selectedRepeatType = "none";

      repeatTypeInputs.forEach((input) => {
        if (input.checked) {
          selectedRepeatType = input.value;
        }
      });

      if (selectedRepeatType !== "none") {
        const repeatUntilInput = document.getElementById("repeat_until");

        if (!repeatUntilInput || !repeatUntilInput.value) {
          errors.push(
            "Para eventos recorrentes, √© necess√°rio definir uma data final"
          );
        }

        if (selectedRepeatType === "specific_days") {
          const repeatDays = document.querySelectorAll(
            'input[name="repeat_days[]"]:checked'
          );

          if (repeatDays.length === 0) {
            errors.push(
              "Selecione pelo menos um dia da semana para a recorr√™ncia"
            );
          }
        }
      }

      return errors;
    }

    // Fun√ß√£o para exibir erros
    function displayErrors(errors) {
      if (!errorList || !errorContainer) {
        console.error("‚ùå Containers de erro n√£o encontrados");
        alert("Erros encontrados:\n" + errors.join("\n"));
        return;
      }

      // Limpar erros anteriores
      errorList.innerHTML = "";

      // Adicionar novos erros
      errors.forEach(function (error) {
        const li = document.createElement("li");
        li.textContent = error;
        errorList.appendChild(li);
      });

      // Mostrar cont√™iner de erros
      errorContainer.style.display = "block";

      // Rolar para o topo do formul√°rio
      window.scrollTo({
        top: form.offsetTop - 20,
        behavior: "smooth",
      });
    }
  }
});
